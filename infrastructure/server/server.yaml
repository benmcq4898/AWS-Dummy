AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
    Description: The Environment being targetted
    Default: main
  SharedStackName:
    Type: String
    Description: The Cloudformation Stack for the Shared Infrastructure
    Default: main-shared-infrastructure
  Domain:
    Type: String
    Description: The Domain used for hosting
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64'
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName:
        Fn::ImportValue: !Sub "${SharedStackName}-EC2KeyPairName"
      SubnetId: 
        Fn::ImportValue: !Sub "${SharedStackName}-PrivateSubnet1"
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${SharedStackName}-BastionSecurityGroupId"    
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic
      VpcId: 
        Fn::ImportValue: !Sub "${SharedStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-Application-ALB"
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub "${SharedStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${SharedStackName}-PublicSubnet2"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
  
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-Application-TG"
      Protocol: HTTP
      Port: 80
      VpcId: 
        Fn::ImportValue: !Sub "${SharedStackName}-VPC"   
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Targets:
        - Id: !Ref EC2Instance
          Port: 3000
  
  ALBListener01:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  ALBCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${Environment}.api.${Domain}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${Environment}.api.${Domain}"
          HostedZoneId: 
            Fn::ImportValue: !Sub "${SharedStackName}-HostedZoneId"
  ALBListener02:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        # You need to create this certificate
        - CertificateArn: arn:aws:acm:us-east-1:408639794947:certificate/edf47a05-894f-46e7-987d-58199bd101fd
  AlbARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: 
        Fn::ImportValue: !Sub "${SharedStackName}-HostedZoneId"   
      Name: !Sub "${Environment}.api.${Domain}."
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
        EvaluateTargetHealth: true